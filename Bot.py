from Player import Player

class Bot(Player):

	def __init__(self, name, cash=3000):
		Player.__init__(self, name, cash)
		self.hands = [[]]
		self.rcount = 0
		self.tcount = 0
		self.threshold = 2
		self.rate = 0.0001
		self.dead_cards = 0
		self.doubled_down = False

		self.hard_strategy = {
				(8,2) : 1, (8,3) : 1, (8,4) : 1, (8,5) : 1, (8,6) : 1, (8,7) : 1, (8,8) : 1, (8,9) : 1, (8,10) : 1, (8,"J") : 1, (8,"Q") : 1, (8,"K") : 1, (8,"A") : 1,
				(9,2) : 1, (9,3) : 2, (9,4) : 2, (9,5) : 2, (9,6) : 2, (9,7) : 1, (9,8) : 1, (9,9) : 1, (9,10) : 1, (9,"J") : 1, (9,"Q") : 1, (9,"K") : 1, (9,"A") : 1,
				(10,2) : 2, (10,3) : 2, (10,4) : 2, (10,5) : 2, (10,6) : 2, (10,7) : 2, (10,8) : 2, (10,9) : 2, (10,10) : 1, (10,"J") : 1, (10,"Q") : 1, (10,"K") : 1, (10,"A") : 1,
				(11,2) : 2, (11,3) : 2, (11,4) : 2, (11,5) : 2, (11,6) : 2, (11,7) : 2, (11,8) : 2, (11,9) : 2, (11,10) : 2, (11,"J") : 2, (11,"Q") : 2, (11,"K") : 2, (11,"A") : 1,
				(12,2) : 1, (12,3) : 1, (12,4) : 0, (12,5) : 0, (12,6) : 0, (12,7) : 1, (12,8) : 1, (12,9) : 1, (12,10) : 1, (12,"J") : 1, (12,"Q") : 1, (12,"K") : 1, (12,"A") : 1,
				(13,2) : 0, (13,3) : 0, (13,4) : 0, (13,5) : 0, (13,6) : 0, (13,7) : 1, (13,8) : 1, (13,9) : 1, (13,10) : 1, (13,"J") : 1, (13,"Q") : 1, (13,"K") : 1, (13,"A") : 1,
				(14,2) : 0, (14,3) : 0, (14,4) : 0, (14,5) : 0, (14,6) : 0, (14,7) : 1, (14,8) : 1, (14,9) : 1, (14,10) : 1, (14,"J") : 1, (14,"Q") : 1, (14,"K") : 1, (14,"A") : 1,
				(15,2) : 0, (15,3) : 0, (15,4) : 0, (15,5) : 0, (15,6) : 0, (15,7) : 1, (15,8) : 1, (15,9) : 1, (15,10) : 1, (15,"J") : 1, (15,"Q") : 1, (15,"K") : 1, (15,"A") : 1,
				(16,2) : 0, (16,3) : 0, (16,4) : 0, (16,5) : 0, (16,6) : 0, (16,7) : 1, (16,8) : 1, (16,9) : 1, (16,10) : 1, (16,"J") : 1, (16,"Q") : 1, (16,"K") : 1, (16,"A") : 1,
				(17,2) : 0, (17,3) : 0, (17,4) : 0, (17,5) : 0, (17,6) : 0, (17,7) : 0, (17,8) : 0, (17,9) : 0, (17,10) : 0, (17,"J") : 0, (17,"Q") : 0, (17,"K") : 0, (17,"A") : 0,
				(18,2) : 0, (18,3) : 0, (18,4) : 0, (18,5) : 0, (18,6) : 0, (18,7) : 0, (18,8) : 0, (18,9) : 0, (18,10) : 0, (18,"J") : 0, (18,"Q") : 0, (18,"K") : 0, (18,"A") : 0,
				(19,2) : 0, (19,3) : 0, (19,4) : 0, (19,5) : 0, (19,6) : 0, (19,7) : 0, (19,8) : 0, (19,9) : 0, (19,10) : 0, (19,"J") : 0, (19,"Q") : 0, (19,"K") : 0, (19,"A") : 0,
				(20,2) : 0, (20,3) : 0, (20,4) : 0, (20,5) : 0, (20,6) : 0, (20,7) : 0, (20,8) : 0, (20,9) : 0, (20,10) : 0, (20,"J") : 0, (20,"Q") : 0, (20,"K") : 0, (20,"A") : 0,
				(21,2) : 0, (21,3) : 0, (21,4) : 0, (21,5) : 0, (21,6) : 0, (21,7) : 0, (21,8) : 0, (21,9) : 0, (21,10) : 0, (21,"J") : 0, (21,"Q") : 0, (21,"K") : 0, (21,"A") : 0
		}

		self.soft_strategy = {
				(13,2) : 1, (13,3) : 1, (13,4) : 1, (13,5) : 2, (13,6) : 2, (13,7) : 1, (13,8) : 1, (13,9) : 1, (13,10) : 1, (13,"J") : 1, (13,"Q") : 1, (13,"K") : 1, (13,"A") : 1,
				(14,2) : 1, (14,3) : 1, (14,4) : 1, (14,5) : 2, (14,6) : 2, (14,7) : 1, (14,8) : 1, (14,9) : 1, (14,10) : 1, (14,"J") : 1, (14,"Q") : 1, (14,"K") : 1, (14,"A") : 1,
				(15,2) : 1, (15,3) : 1, (15,4) : 2, (15,5) : 2, (15,6) : 2, (15,7) : 1, (15,8) : 1, (15,9) : 1, (15,10) : 1, (15,"J") : 1, (15,"Q") : 1, (15,"K") : 1, (15,"A") : 1,
				(16,2) : 1, (16,3) : 1, (16,4) : 2, (16,5) : 2, (16,6) : 2, (16,7) : 1, (16,8) : 1, (16,9) : 1, (16,10) : 1, (16,"J") : 1, (16,"Q") : 1, (16,"K") : 1, (16,"A") : 1,
				(17,2) : 1, (17,3) : 2, (17,4) : 2, (17,5) : 2, (17,6) : 2, (17,7) : 1, (17,8) : 1, (17,9) : 1, (17,10) : 1, (17,"J") : 1, (17,"Q") : 1, (17,"K") : 1, (17,"A") : 1,
				(18,2) : 0, (18,3) : 2, (18,4) : 2, (18,5) : 2, (18,6) : 2, (18,7) : 0, (18,8) : 0, (18,9) : 0, (18,10) : 0, (18,"J") : 0, (18,"Q") : 0, (18,"K") : 0, (18,"A") : 0,
				(19,2) : 0, (19,3) : 0, (19,4) : 0, (19,5) : 0, (19,6) : 0, (19,7) : 0, (19,8) : 0, (19,9) : 0, (19,10) : 0, (19,"J") : 0, (19,"Q") : 0, (19,"K") : 0, (19,"A") : 0,
				(20,2) : 0, (20,3) : 0, (20,4) : 0, (20,5) : 0, (20,6) : 0, (20,7) : 0, (20,8) : 0, (20,9) : 0, (20,10) : 0, (20,"J") : 0, (20,"Q") : 0, (20,"K") : 0, (20,"A") : 0,
				(21,2) : 0, (21,3) : 0, (21,4) : 0, (21,5) : 0, (21,6) : 0, (21,7) : 0, (21,8) : 0, (21,9) : 0, (21,10) : 0, (21,"J") : 0, (21,"Q") : 0, (21,"K") : 0, (21,"A") : 0
		}

		self.split_strategy = {
				(4,2) : 3, (4,3) : 3, (4,4) : 3, (4,5) : 3, (4,6) : 3, (4,7) : 3, (4,8) : 1, (4,9) : 1, (4,10) : 1, (4,"J") : 1, (4,"Q") : 1, (4,"K") : 1, (4,"A") : 1,
				(6,2) : 3, (6,3) : 3, (6,4) : 3, (6,5) : 3, (6,6) : 3, (6,7) : 3, (6,8) : 1, (6,9) : 1, (6,10) : 1, (6,"J") : 1, (6,"Q") : 1, (6,"K") : 1, (6,"A") : 1,
				(8,2) : 1, (8,3) : 1, (8,4) : 1, (8,5) : 3, (8,6) : 3, (8,7) : 1, (8,8) : 1, (8,9) : 1, (8,10) : 1, (8,"J") : 1, (8,"Q") : 1, (8,"K") : 1, (8,"A") : 1,
				(10,2) : 2, (10,3) : 2, (10,4) : 2, (10,5) : 2, (10,6) : 2, (10,7) : 2, (10,8) : 2, (10,9) : 2, (10,10) : 1, (10,"J") : 1, (10,"Q") : 1, (10,"K") : 1, (10,"A") : 1,
				(12,2) : 3, (12,3) : 3, (12,4) : 3, (12,5) : 3, (12,6) : 3, (12,7) : 1, (12,8) : 1, (12,9) : 1, (12,10) : 1, (12,"J") : 1, (12,"Q") : 1, (12,"K") : 1, (12,"A") : 1,
				(14,2) : 3, (14,3) : 3, (14,4) : 3, (14,5) : 3, (14,6) : 3, (14,7) : 3, (14,8) : 1, (14,9) : 1, (14,10) : 1, (14,"J") : 1, (14,"Q") : 1, (14,"K") : 1, (14,"A") : 1,
				(16,2) : 3, (16,3) : 3, (16,4) : 3, (16,5) : 3, (16,6) : 3, (16,7) : 3, (16,8) : 3, (16,9) : 3, (16,10) : 3, (16,"J") : 3, (16,"Q") : 3, (16,"K") : 3, (16,"A") : 3,
				(18,2) : 3, (18,3) : 3, (18,4) : 3, (18,5) : 3, (18,6) : 3, (18,7) : 0, (18,8) : 3, (18,9) : 3, (18,10) : 0, (18,"J") : 0, (18,"Q") : 0, (18,"K") : 0, (18,"A") : 0,
				(20,2) : 0, (20,3) : 0, (20,4) : 0, (20,5) : 0, (20,6) : 0, (20,7) : 0, (20,8) : 0, (20,9) : 0, (20,10) : 0, (20,"J") : 0, (20,"Q") : 0, (20,"K") : 0, (20,"A") : 0,
				(22,2) : 3, (22,3) : 3, (22,4) : 3, (22,5) : 3, (22,6) : 3, (22,7) : 3, (22,8) : 3, (22,9) : 3, (22,10) : 3, (22,"J") : 3, (22,"Q") : 3, (22,"K") : 3, (22,"A") : 3
		}

		# Kelly Criterion optimal betting rates
		self.betting_rates = { 2 : 0.0038, 3 : 0.0076, 4 : 0.0114,
				       5 : 0.0152, 6 : 0.0192, 7 : 0.0228 }

	def play(self, dealer, hand=0):
		# -1 = bust, 1 = hit, 0 = stay, 2 = double down, 3 = split

		if self.val[hand] > 21: return -1
		elif self.doubled_down:
			return 0
		elif len(self.hands[hand]) == 2 and self.hands[hand][0][1] == self.hands[hand][1][1] and len(self.hands) == 1:
			return self.split_strategy[(self.val[hand], dealer.hands[0][1][1])]
		elif self.val[hand] < 8 and self.aces[hand] == 0:
			return 1
		elif self.val[hand] < 21 and self.aces[hand] == 0:
			return self.hard_strategy[(self.val[hand], dealer.hands[0][1][1])]
		elif self.val[hand] < 21 and self.aces[hand] == 1 and len(self.hands[hand]) == 2:
			return self.soft_strategy[(self.val[hand], dealer.hands[0][1][1])]
		else:
			return 0

	def count(self, card):
		if type(card[1]) is str or int(card[1]) == 10:
			self.rcount -= 1
		elif int(card[1]) in range(2,7):
			self.rcount += 1		
		self.dead_cards += 1

	def update(self, players):
		dealer = players[-1]
		for player in players[:-2]:
			for hand in player.hands:
				for card in hand:
					self.count(card)
		for hand in dealer.hands:
			for card in hand:
				self.count(card)

	def clear_hand(self):
		Player.clear_hand(self)
		self.doubled_down = False

	def make_bet(self):
		self.rate = 0.0001
		self.tcount = self.rcount/int(((6*52 - self.dead_cards)/52))
		if self.tcount >= self.threshold:
			self.rate = self.betting_rates[min(self.tcount, 7)]
		self.bet = max(5,int(self.rate*self.cash))
#		if self.tcount < 0: # Don't play if house has advantage
#			self.bet = 0
		self.cash -= self.bet
